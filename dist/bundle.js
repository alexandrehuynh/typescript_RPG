(()=>{"use strict";const e=class{constructor(e,n,t){this.offenseMoves=[],this.defenseMoves=[],this.experiencePoints=0,this.name=e,this._nation=n,this.bendingStyle=t}get nation(){return this._nation}set nation(e){if(!["Earth Kingdom","Water Tribes","Air Temples","Fire Nation","Republic City"].includes(e))throw new Error("Invalid nation.");this._nation=e}learnOffenseMove(e){this.offenseMoves.push(e)}forgetOffenseMove(e){this.offenseMoves=this.offenseMoves.filter((n=>n.name!==e))}learnDefenseMove(e){this.defenseMoves.push(e)}forgetDefenseMove(e){this.defenseMoves=this.defenseMoves.filter((n=>n.name!==e))}attack(){console.log(`${this.name} attacks with ${this.offenseMoves.map((e=>e.attack())).join(", ")}`)}defend(){console.log(`${this.name} defends with ${this.defenseMoves.map((e=>e.defend())).join(", ")}`)}};class n extends e{constructor(e,n,t,s,a){super(e,n,t),this.offenseMoves=s,this.defenseMoves=a}static getInstance(e,t,s,a,r){return n.instance?console.error("There can only be one Avatar."):n.instance=new n(e,t,s,a,r),n.instance}}n.instance=null;const t=n,s=class extends e{constructor(e,n,t,s){super(e,n,"Airbending"),this.offenseMoves=t,this.defenseMoves=s}},a=class extends e{constructor(e,n,t,s){super(e,n,"Earthbending"),this.offenseMoves=t,this.defenseMoves=s}},r=class extends e{constructor(e,n,t,s){super(e,n,"Firebending"),this.offenseMoves=t,this.defenseMoves=s}},i=class extends e{constructor(e,n,t,s){super(e,n,"Waterbending"),this.offenseMoves=t,this.defenseMoves=s}},o=class extends e{constructor(e,n,t,s){super(e,n,"Non-Bender"),this.offenseMoves=t,this.defenseMoves=s}},c=class{static displayCharacter(e,n){const t=document.getElementById(n);if(!t)return void console.error("Container not found");const s=this.createCharacterCard(e);t.innerHTML="",t.appendChild(s)}static createCharacterCard(e){const n=document.createElement("div");return n.className="character-card",n.innerHTML=`\n            <h2>${e.name}</h2>\n            <p>Nation: ${e.nation}</p>\n            <p>Bending Style: ${e.bendingStyle}</p>\n            <p>Abilities: ${e.offenseMoves.map((e=>e.name)).join(", ")}</p>\n        `,n}static displayCharacters(e,n){const t=document.getElementById(n);t&&e.forEach((e=>{const n=this.createCharacterCard(e);t.appendChild(n)}))}};var d;let l=null;null===(d=document.getElementById("create-character-btn"))||void 0===d||d.addEventListener("click",(()=>{const e=document.getElementById("character-type-select"),n=document.getElementById("character-name-input"),d=document.getElementById("nation-select");let h="";"Avatar"===e.value&&(h=document.getElementById("bending-style-select").value),function(e,n,d,h){let f=null;switch(e){case"Airbender":f=new s(n,"Republic City"===d?d:"Air Temples",[],[]);break;case"Earthbender":f=new a(n,"Republic City"===d?d:"Earth Kingdom",[],[]);break;case"Firebender":f=new r(n,"Republic City"===d?d:"Fire Nation",[],[]);break;case"Waterbender":f=new i(n,"Republic City"===d?d:"Water Tribes",[],[]);break;case"Nonbender":f=new o(n,d,[],[]);break;case"Avatar":if(l)return void console.error("An Avatar already exists.");l=t.getInstance(n,d,h,[],[]),f=l}f&&c.displayCharacter(f,"character-display")}(e.value,n.value,d.value,h)}))})();